<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>

<muclient>
<plugin
    name="FK_Output_History"
    author="Areia"
    id="3d0ba65da96f278b1d729f9c"
    language="Lua"
    purpose="Save output to a notepad window"
    save_state="n"
    date_written="2022-03-30 12:00:00"
    requires="5.06"
    version="0.00"
>
<description trim="y">
<![CDATA[
]]>
</description>

</plugin>

<include name="constants.lua"/>



<script>
<![CDATA[
require("commas")
require("serialize")
require("tprint")
require("var")
require("wait")
local const = require("fk_const")


--------------------------------------------------
-- Log
--------------------------------------------------


Log = {}
Log.TITLE = "Output"
Log.MAX_SIZE = 838860 -- in bytes.
Log.SAVE_METHOD = 2 -- Do not ask to save.


function Log.exists()
    for _, title in ipairs(GetNotepadList() or {}) do
        if (title == Log.TITLE) then
            return true
        end
    end
    return false
end


function Log.initialize()
    if (Log.exists()) then
        return -- Already done.
    end
    SendToNotepad(Log.TITLE, "Capturing all output.\r\n\r\n")
    Log.make_read_only()
    Log.make_no_save()
end


function Log.append(str)
    Log.initialize()
    if (not str or str == "") then
        return
    end

    if (Log.get_size() > Log.MAX_SIZE) then
        local oldContents = Log.get_contents()
        Log.replace(oldContents:sub(Log.MAX_SIZE / 2))
    end

    str = str .. "\r\n"
    return AppendToNotepad(Log.TITLE, str)
end


function Log.replace(str)
    return ReplaceNotepad(Log.TITLE, str)
end


function Log.make_read_only(readOnly)
    return NotepadReadOnly(Log.TITLE, readOnly)
end


function Log.make_no_save()
    return NotepadSaveMethod(Log.TITLE, Log.SAVE_METHOD)
end


function Log.get_contents()
    return GetNotepadText(Log.TITLE)
end


function Log.get_size()
    return GetNotepadLength(Log.TITLE)
end
]]>
</script>



<script>
<![CDATA[
--------------------------------------------------
-- Utility
--------------------------------------------------


Utility = {}


function Utility.initialize()
    local initializers = {
        Log.initialize,
    }
    for _, initializer in ipairs(initializers) do
        initializer()
    end
end


function Utility.deinitialize()
end
]]>
</script>


<script>
<![CDATA[
--------------------------------------------------
-- Plugin Callbacks
--------------------------------------------------


function OnPluginInstall()
    Utility.initialize()
end


function OnPluginEnable()
    OnPluginInstall()
end


function OnPluginClose()
    Utility.deinitialize()
end


function OnPluginDisable()
    OnPluginClose()
end


function OnPluginScreendraw(type, log, line)
    if (not line or line == "" or type > 1) then
        -- Do not bother with empty lines or user commands.
        return
    end
    Log.append(line)
end


function OnPluginBroadcast(msg, id, name, text)
end
]]>
</script>


</muclient>
