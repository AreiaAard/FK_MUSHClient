<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient [
    <!ENTITY cmdPrefix "fkcm">
]>

<muclient>
<plugin
    name="FK_Character_Manager"
    author="Areia"
    id="827bf972cf12156f7b855941"
    language="Lua"
    purpose="Manage character profiles"
    save_state="n"
    date_written="2022-04-07 03:00:00"
    requires="5.06"
    version="0.00"
>
<description trim="y">
<![CDATA[
]]>
</description>

</plugin>

<include name="constants.lua"/>



<aliases>
    <alias
     match="^&cmdPrefix; +load +(?<character>\w+)$"
     enabled="y"
     send_to="12"
     regexp="y"
     ignore_case="y"
     sequence="100"
    >
     <send>
        Manager.load("%&lt;character&gt;")
     </send>
    </alias>
    <alias
     match="^&cmdPrefix; +unload$"
     enabled="y"
     send_to="12"
     regexp="y"
     ignore_case="y"
     sequence="100"
    >
     <send>
        Manager.unload(true)
     </send>
    </alias>

    <alias
     match="^&cmdPrefix; +create +(?<character>\w+)$"
     enabled="y"
     script="Manager.create_new_profile"
     regexp="y"
     ignore_case="y"
     sequence="100"
    >
    </alias>
</aliases>


<script>
<![CDATA[
require("commas")
require("json")
require("tprint")
require("var")
require("wait")
local const = require("fk_const")
require("fk_event")
require("fk_note")


--------------------------------------------------
-- Manager
--------------------------------------------------


Manager = {}
Manager.ID = GetPluginID()
Manager.FULL_PATH = GetPluginInfo(Manager.ID, 6)
Manager.DIRECTORY, Manager.FILE = Manager.FULL_PATH:match("^(.+\\)(.+)$")


function Manager.login(character)
    Manager.load(character)
end


function Manager.logout(character)
    Manager.unload()
end


function Manager.load(character)
    Manager.unload()
    local plugin = Utility.get_character_plugin(character)
    if (not plugin) then
        local msg = "No character profile found for %s."
        Utility.msg_major(msg:format(character))
        return
    end
    local pluginPath = Manager.DIRECTORY .. plugin.file
    local code = LoadPlugin(pluginPath)
    if (code ~= error_code.eOK) then
        local msg = "Failed to load character profile for %s."
        Utility.msg_major(msg:format(plugin.character))
        Utility.msg_minor(error_desc[code])
        return
    end
    local msg = "Loaded character profile for %s."
    Utility.msg_major(msg:format(plugin.character))
end


function Manager.unload(report)
    local plugins = Utility.get_plugin_list()
    local countUnloaded = 0
    for _, plugin in ipairs(plugins) do
        if (Manager.unload_single(plugin, report)) then
            countUnloaded = countUnloaded + 1
        end
    end
    if (report and countUnloaded == 0) then
        Utility.msg_major("No character profiles unloaded.")
    end
end


function Manager.unload_single(plugin)
    local character = plugin.name:match("^FK_Character_(%a+)$")
    local isThisPlugin = plugin.id == Manager.ID
    if (not character or isThisPlugin) then
        return false
    end
    local code = UnloadPlugin(plugin.id)
    if (code ~= error_code.eOK) then
        local msg = "Failed to unload character profile for %s."
        Utility.msg_major(msg:format(character))
        Utility.msg_minor(error_desc[code])
        return
    end
    if (report) then
        local msg = "Unloaded character profile for %s."
        Utility.msg_major(msg:format(character))
    end
    return true
end


function Manager.create_new_profile(alias, line, wc)
    local character = Utility.pascal_case(wc.character)
    if (Utility.get_character_plugin(character)) then
        local msg = "A character profile for %s already exists."
        Utility.msg_major(msg:format(character))
        return
    end
    local templatePath = Manager.DIRECTORY .. "template.txt"
    local template, errorMsg = io.open(templatePath, "r")
    if (not template) then
        Utility.msg_major("Failed to load character profile template.")
        if (errorMsg) then
            Utility.msg_minor(errorMsg)
        end
        return
    end
    local text = template:read("*a")
    template:close()

    local date = os.date("*t")
    local timestamp = "%04d-%02d-%02d %02d:%02d:%02d"
    timestamp = timestamp:format(
        date.year, date.month, date.day, date.hour, date.min, date.sec
    )
    local id = GetUniqueID()
    text = text:gsub("{{characterName}}", character)
    text = text:gsub("{{id}}", id)
    text = text:gsub("{{timestamp}}", timestamp)

    local filename = string.format("fk_character_%s.xml", character:lower())
    local profile, errorMsg = io.open(Manager.DIRECTORY .. filename, "w")
    if (not template) then
        Utility.msg_major("Failed to write new character profile.")
        if (errorMsg) then
            Utility.msg_minor(errorMsg)
        end
        return
    end
    profile:write(text)
    profile:close()

    local msg = "Created new character profile for %s."
    Utility.msg_major(msg:format(character))
end
]]>
</script>



<script>
<![CDATA[
--------------------------------------------------
-- Utility
--------------------------------------------------


Utility = {}


function Utility.initialize()
    local initializers = {
    }
    for _, initializer in ipairs(initializers) do
        initializer()
    end
end


function Utility.deinitialize()
end


function Utility.msg_major(str)
    local msg = "[{B0}Char Manager{70}]: " .. str
    fk_note(msg)
end


function Utility.msg_minor(str)
    local msg = "                " .. str
    fk_note(msg)
end


function Utility.get_plugin_name(id)
    return GetPluginInfo(id, 1)
end


function Utility.get_plugin_list()
    local plugins = {}
    local pluginIDs = GetPluginList()
    -- Shouldn't be possible, but...
    if (not pluginIDs or #pluginIDs == 0) then
        return plugins
    end
    for _, id in ipairs(pluginIDs) do
        local name = Utility.get_plugin_name(id)
        local plugin = {id=id, name=name}
        table.insert(plugins, plugin)
    end
    return plugins
end


function Utility.get_character_plugin_list()
    local filePattern = Manager.DIRECTORY .. "fk_character_*.xml"
    local characterFiles = utils.readdir(filePattern)
    local pluginFiles = {}
    if (not characterFiles) then
        return pluginFiles
    end
    for fileName in pairs(characterFiles) do
        if (fileName ~= Manager.FILE) then
            local characterName = fileName:match("^fk_character_(%a+).xml$")
            characterName = Utility.pascal_case(characterName)
            local pluginFile = {file=fileName, character=characterName}
            table.insert(pluginFiles, pluginFile)
        end
    end
    table.sort(pluginFiles,
        function(e1, e2) return e1.character < e2.character end
    )
    return pluginFiles
end


function Utility.get_character_plugin(character)
    character = Utility.pascal_case(character)
    local plugins = Utility.get_character_plugin_list()
    for _, plugin in ipairs(plugins) do
        if (plugin.character == character) then
            return plugin
        end
    end
end


function Utility.pascal_case(str)
    str = str:gsub("(%a)([%w_']*)",
        function(first,remainder)
            return string.format("%s%s", first:upper(), remainder:lower())
        end
    )
    return str
end
]]>
</script>


<script>
<![CDATA[
--------------------------------------------------
-- Plugin Callbacks
--------------------------------------------------


function OnPluginInstall()
    Utility.initialize()
end


function OnPluginEnable()
    OnPluginInstall()
end


function OnPluginClose()
    Utility.deinitialize()
end


function OnPluginDisable()
    OnPluginClose()
end


function OnPluginBroadcast(msg, id, name, text)
    if (id ~= const.PLUGIN.EVENT_HANDLER
    or msg ~= const.EVENT_TYPE.LOGIN) then
        return
    end

    local path = utils.split(text, ".")
    local action = path[2] -- 'login' or 'logout'.
    local character = fk_event(text).name
    Manager[action](character)
end
]]>
</script>


</muclient>
