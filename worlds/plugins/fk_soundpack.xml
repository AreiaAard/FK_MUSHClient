<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient [
    <!ENTITY cmdPrefix "fksp">
]>

<muclient>
<plugin
    name="FK_Soundpack"
    author="Areia"
    id="cfaef05e9329c67fdec753b1"
    language="Lua"
    purpose="Sound notifications"
    save_state="n"
    date_written="2022-03-23 22:00:00"
    requires="5.06"
    version="0.00"
>
<description trim="y">
<![CDATA[
]]>
</description>

</plugin>

<include name="constants.lua"/>


<aliases>
    <alias
     match="^ *&cmdPrefix; +config +vol *$"
     enabled="y"
     script="Config.volume"
     regexp="y"
     ignore_case="y"
     sequence="100"
    >
    </alias>
    <alias
     match="^ *&cmdPrefix; +config +vol +(?<volume>\d+) *$"
     enabled="y"
     script="Config.volume"
     regexp="y"
     ignore_case="y"
     sequence="100"
    >
    </alias>
</aliases>


<script>
<![CDATA[
require("commas")
require("serialize")
require("tprint")
require("var")
require("wait")
local const = require("fk_const")
require("fk_note")


--------------------------------------------------
-- Config
--------------------------------------------------


Config = {}


function Config.initialize()
    Config.load()
end


function Config.default()
    local data = {
        -- Global volume.
        volume = 100,

        -- Individual sound event config.
        events = {},
    }

    data.events.osay = {
        desc = "OOC say in your room",
        defaultWav = "osay.wav",
        volume = 100,
        panning = 0,
    }
    data.events.otell = {
        desc = "Send/receive OOC tells",
        defaultWav = "otell.wav",
        volume = 100,
        panning = 0,
    }
    data.events.say = {
        desc = "Say and sayto in your room",
        defaultWav = "say.wav",
        volume = 100,
        panning = 0,
    }
    data.events.tell = {
        desc = "Send/receive tells",
        defaultWav = "tell.wav",
        volume = 100,
        panning = 0,
    }
    data.events.yell = {
        desc = "Yells in your area",
        defaultWav = "yell.wav",
        volume = 100,
        panning = 0,
    }

    return serialize.save_simple(data)
end


function Config.load()
    local strvar = var.config or Config.default()
    local data = loadstring("return " .. strvar)()
    Config.data = data
end


function Config.save()
    var.config = serialize.save_simple(Config.data)
end


function Config.get(key)
    return Config.data[key]
end


function Config.set(key, val)
    Config.data[key] = val
    Config.save()
end


function Config.get_event(event)
    return Config.get("events")[event]
end


function Config.set_event(event, key, val)
    local eventData = assert(
        Config.get_event(event),
        string.format("Invalid event name: %s.", event)
    )
    local validKeys = {
        customWav = "string",
        volume = "number",
        panning = "number",
    }
    assert(
        validKeys[key],
        string.format("Invalid setting %s for sound event.", key)
    )
    assert(
        type(val) == validKeys[key],
        string.format(
            "Sound event setting %s must have a value of type %s.",
            key, validKeys[key]
        )
    )

    eventData[key] = val
    Config.save()
end


function Config.volume(alias, line, wc)
    local volume = tonumber(wc.volume) or Config.get("volume")
    -- Max volume of 100.
    volume = math.min(volume, 100)
    Config.set("volume", volume)
    local msg = "Global volume set to %d."
    Utility.msg_major(msg:format(volume))
end
]]>
</script>



<script>
<![CDATA[
--------------------------------------------------
-- Utility
--------------------------------------------------


Utility = {}


function Utility.initialize()
    local initializers = {
        Config.initialize,
    }
    for _, initializer in ipairs(initializers) do
        initializer()
    end
end


function Utility.deinitialize()
end


function Utility.msg_major(str)
    local msg = "[{B0}Soundpack{70}]: " .. str
    fk_note(msg)
end
]]>
</script>


<script>
<![CDATA[
--------------------------------------------------
-- Plugin Callbacks
--------------------------------------------------


function OnPluginInstall()
    Utility.initialize()
end


function OnPluginEnable()
    OnPluginInstall()
end


function OnPluginClose()
    Utility.deinitialize()
end


function OnPluginDisable()
    OnPluginClose()
end


function OnPluginBroadcast(msg, id, name, text)
    if (id ~= const.PLUGIN.EVENT_HANDLER) then
        return
    end
end
]]>
</script>


</muclient>
